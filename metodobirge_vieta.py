# -*- coding: utf-8 -*-
"""MetodoBirge-Vieta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AG37xdfn6mGkYspbAGOIkEHDh2dIDsrQ
"""

import numpy as np

coef = [1, -5, 5, -1]
n = 10
x0 = 0.8

iteraciones = []

for i in range(n):
    b = [coef[0]]
    c = [coef[0]]

    for j in range(1, len(coef)):
        b.append(coef[j] + x0 * b[j - 1])
        if j < len(coef) - 1:
            c.append(b[j] + x0 * c[j - 1])

    if c[-1] != 0:
        x1 = x0 - b[-1] / c[-1]
    else:
        x1 = x0

    epsilon_r = abs((x1 - x0) / x1)

    iteraciones.append([
        i + 1, round(x0, 4), round(x1, 4), round(b[-1], 4), round(c[-1], 4), round(epsilon_r, 4)
    ])

    x0 = x1

print("\nTabla de resultados (Método de Birge-Vieta):")
print(f"{'Iteración':<10}{'x_i':<10}{'x_i+1':<10}{'b_n':<10}{'c_n-1':<10}{'Error Relativo (εr)'}")
for it in iteraciones:
    print(f"{it[0]:<10}{it[1]:<10}{it[2]:<10}{it[3]:<10}{it[4]:<10}{it[5]}")

b = b[:-1]
print(f"\nCoeficientes restantes: {b}")

a, b1, c = b
discriminante = b1**2 - 4*a*c

if discriminante >= 0:
    raiz1 = (-b1 + np.sqrt(discriminante)) / (2 * a)
    raiz2 = (-b1 - np.sqrt(discriminante)) / (2 * a)
    print(f"Raíces restantes: {round(raiz1, 4)}, {round(raiz2, 4)}")
else:
    print("Las raíces restantes son complejas.")