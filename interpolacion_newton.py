# -*- coding: utf-8 -*-
"""interpolacion_newton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vuV3fS-JS6EwnjKGk2aXZR1N8ZKRLN_Q
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos actualizados
x = [1, 2, 3, 5, 7, 8]
y = [3, 6, 19, 99, 291, 444]

# Función de diferencias divididas
def diferencias_divididas(x, y):
    n = len(x)
    coef = np.copy(y).astype(float)
    for j in range(1, n):
        coef[j:n] = (coef[j:n] - coef[j-1:n-1]) / (np.array(x[j:n]) - np.array(x[0:n-j]))
    return coef

# Evaluación del polinomio de Newton
def newton_polynomial(coef, x_data, x_val):
    n = len(coef)
    result = coef[0]
    for i in range(1, n):
        term = coef[i]
        for j in range(i):
            term *= (x_val - x_data[j])
        result += term
    return result

# Obtener coeficientes
coef = diferencias_divididas(x, y)

# Evaluar el polinomio en muchos puntos para graficar
x_vals = np.linspace(1, 8, 300)
y_vals = [newton_polynomial(coef, x, xi) for xi in x_vals]

# Gráfica
plt.plot(x_vals, y_vals, label="Interpolación Newton grado 5", color='purple')
plt.plot(x, y, 'ro', label='Datos originales')
plt.title("Interpolación de Newton de grado 5")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.legend()
plt.grid()
plt.show()