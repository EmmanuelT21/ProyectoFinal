# -*- coding: utf-8 -*-
"""Tarea4PrograII.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWxtYrH2FLhD56oOfdP15MwRPIfevoR5
"""

import numpy as np

def jacobi(A, b, x0, iterations=3):
    """Resuelve Ax = b usando el método de Jacobi con un número fijo de iteraciones."""
    n = len(A)
    x = x0.copy()
    for _ in range(iterations):
        x_new = np.zeros(n)
        for i in range(n):
            sum_ax = sum(A[i, j] * x[j] for j in range(n) if j != i)
            x_new[i] = (b[i] - sum_ax) / A[i, i]
        x = x_new
    return x

def gauss_seidel(A, b, x0, iterations=3):
    """Resuelve Ax = b usando el método de Gauss-Seidel con un número fijo de iteraciones."""
    n = len(A)
    x = x0.copy()
    for _ in range(iterations):
        for i in range(n):
            sum_ax = sum(A[i, j] * x[j] for j in range(n) if j != i)
            x[i] = (b[i] - sum_ax) / A[i, i]
    return x

# Definición del sistema de ecuaciones
A = np.array([[1, -0.1, -0.2], [0.1, 7, -0.3], [0.3, -0.2, -10]])
b = np.array([7.85, 19.3, 71.4])
x0 = np.zeros(len(b))

# Resolver con los métodos iterativos
print("Jacobi (3 iteraciones):", jacobi(A, b, x0))
print("Gauss-Seidel (3 iteraciones):", gauss_seidel(A, b, x0))