# -*- coding: utf-8 -*-
"""interpolacion_cuadratica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1icfo1epR9cAN6T_UOPROgFTQ7BdkejDJ
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = [2, 3, 5]
y = [6, 19, 99]

# Construcción del polinomio con diferencias divididas
def diferencias_divididas(x, y):
    n = len(x)
    coef = np.copy(y).astype(float)
    for j in range(1, n):
        coef[j:n] = (coef[j:n] - coef[j-1:n-1]) / (x[j:n] - x[0:n-j])
    return coef

def newton_polynomial(coef, x_data, x_val):
    n = len(coef)
    result = coef[0]
    for i in range(1, n):
        term = coef[i]
        for j in range(i):
            term *= (x_val - x_data[j])
        result += term
    return result

# Coeficientes
coef = diferencias_divididas(np.array(x), np.array(y))

# Evaluamos para graficar
x_vals = np.linspace(2, 5, 100)
y_vals = [newton_polynomial(coef, x, xi) for xi in x_vals]

# Gráfica
plt.plot(x_vals, y_vals, label="Interpolación cuadrática", color='blue')
plt.plot(x, y, 'ro', label='Datos originales')
plt.title("Interpolación cuadrática de f(x)")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.legend()
plt.grid()
plt.show()